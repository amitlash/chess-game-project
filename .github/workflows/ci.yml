name: CI/CD Pipeline

on:
  push:
    branches: [main, dev/backend, dev/frontend]
  pull_request:
    branches: [main, dev/backend, dev/frontend]

jobs:
  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black isort flake8 mypy bandit

      - name: Run linting
        run: |
          black --check --diff .
          isort --check-only --diff .
          flake8 . --max-line-length=88 --extend-ignore=E203,W503

      - name: Run type checking
        run: |
          mypy . --ignore-missing-imports

      - name: Run security checks
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Run tests with coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Build project
        run: npm run build

      - name: Run tests (if available)
        run: npm test --if-present

  # Integration Tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Start backend server
        run: |
          cd backend
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Run integration tests
        run: |
          cd backend
          pytest tests/test_integration.py -v

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install locust

      - name: Start backend server
        run: |
          cd backend
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Run performance tests
        run: |
          cd backend
          locust -f tests/performance/locustfile.py --headless --users 10 --spawn-rate 1 --run-time 30s

  # Quality Gates
  quality-gates:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, integration-test, security-scan, performance-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Quality Gate Check
        run: |
          echo "âœ… All quality gates passed!"
          echo "âœ… Backend tests: PASSED"
          echo "âœ… Frontend tests: PASSED"
          echo "âœ… Integration tests: PASSED"
          echo "âœ… Security scan: PASSED"
          echo "âœ… Performance tests: PASSED"
          echo ""
          echo "ðŸš€ Ready for deployment!"
